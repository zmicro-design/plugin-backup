#!/bin/bash

help() {
  echo "Usage:"
  echo "  register <name> <data_dir> <cron_type> <cron_hour> [<cron_day> <cron_month>]"
  echo ""
  echo "  cron_type: daily weekly monthly yearly"
}

core() {
  if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    help
    exit 0
  fi

  local name=$1
  local data_dir=${@:2}

  local cron_type_options=("daily" "weekly" "monthly" "yearly")
  local cron_hour_options=(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23)
  local cron_day_options=(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31)
  local cron_month_options=(1 2 3 4 5 6 7 8 9 10 11 12)

  if [ -z "$name" ]; then
    os::inquirer name "text" "Backup Name" true
    os::inquirer data_dir "text" "Backup Directory" true
    if [ ! -d "$data_dir" ]; then
      log::error "[$(timestamp)] backup data dir (${data_dir}) not found"
      exit 1
    fi

    os::inquirer cron_type "select" cron_type_options "Backup Cron Type" true

    local cron_type_human=""
    case $cron_type in
    daily)
      cron_type_human="day"
      ;;
    weekly)
      cron_type_human="week"
      ;;
    monthly)
      cron_type_human="month"
      ;;
    yearly)
      cron_type_human="year"
      ;;
    esac
    # local cron_hour=""
    # while [ "$cron_hour" = "" ]; do
    #   os::inquirer cron_hour "text" "Backup Cron Hour (Every $cron_type_human) (available: 0 - 23)" true
    #   if [ "$cron_hour" != "" ] && [ $cron_hour -gt -1 ] && [ $cron_hour -lt 24 ]; then
    #     break
    #   fi

    #   log::warn "[$(timestamp)] cron hour pattern error, must be number in range [0 ~ 23], try again"
    # done
    os::inquirer cron_hour "select" cron_hour_options "Backup Cron Hour (Every $cron_type_human) (available: 0 - 23)" true

    # only work when cron_type === yearly
    local cron_month=""
    local cron_day=""
    if [ "$cron_type" = "yearly" ]; then
      # while [ "$cron_month" = "" ]; do
      #   os::inquirer cron_month "text" "Backup Cron Hour (Every $cron_type_human) (available: 1 - 12)" true
      #   if [ "$cron_month" != "" ] && [ $cron_month -gt 1 ] && [ $cron_month -lt 13 ]; then
      #     break
      #   fi

      #   log::warn "[$(timestamp)] cron hour pattern error, must be number in range [1 ~ 12], try again"
      # done
      os::inquirer cron_month "select" cron_month_options "Backup Cron Hour (Every $cron_type_human) (available: 1 - 12)" true

      # while [ "$cron_day" = "" ]; do
      #   os::inquirer cron_day "text" "Backup Cron Hour (Every $cron_type_human, Month $cron_month) (available: 1 - 31)" true
      #   if [ "$cron_day" != "" ] && [ $cron_day -gt 1 ] && [ $cron_day -lt 32 ]; then
      #     break
      #   fi

      #   log::warn "[$(timestamp)] cron hour pattern error, must be number in range [1 ~ 31], try again"
      # done
      os::inquirer cron_day "select" cron_day_options "Backup Cron Hour (Every $cron_type_human, Month $cron_month) (available: 1 - 31)" true
    fi

    local cron_pattern=""
    case $cron_type in
    daily)
      cron_pattern="0 $cron_hour */1 * *"
      ;;
    weekly)
      cron_pattern="0 $cron_hour * * */1"
      ;;
    monthly)
      cron_pattern="0 $cron_hour * */1 *"
      ;;
    yearly)
      cron_pattern="0 $cron_hour $cron_day $cron_month *"
      ;;
    esac

    log::info ""
    log::info "############## Backup Info ##############"
    log::info "# Backup Name: $name"
    log::info "# Backup Directory: $data_dir"
    if [ "$cron_type" = "yearly" ]; then
      log::info "# Backup Cron: Every $cron_type_human $cron_month $cron_day $cron_hour:00 ($cron_pattern)"
    else
      log::info "# Backup Cron: Every $cron_type_human $cron_hour:00 ($cron_pattern)"
    fi
    log::info "############## Backup Info ##############"
    log::info ""
    os::inquirer yesno "yesno" "Are you sure you want to backup "
    if [ "$yesno" != "true" ]; then
      exit 1
    fi
  fi

  backup::register $name $data_dir "$cron_pattern"
}

run() {
  core "$@"
}

run "$@"
